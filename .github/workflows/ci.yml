name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "20"

jobs:
  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript check
        run: npm run build
        
      - name: Run tests (when available)
        run: npm test --if-present

  # Python Backend Tests
  python-test:
    name: Python Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        run: |
          cd python-backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
          
      - name: Run Python tests (when available)
        run: |
          cd python-backend
          python -m pytest --tb=short -v || echo "No tests found"
          
      - name: Check Python syntax
        run: |
          cd python-backend
          python -m py_compile main.py queue_manager.py processors/*.py

  # Tauri Build Test
  tauri-test:
    name: Tauri Build Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build frontend
        run: npm run build
        
      - name: Test Tauri build
        run: |
          cd src-tauri
          cargo check
          
  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        
      - name: Run cargo audit
        run: |
          cd src-tauri
          cargo audit
          
      - name: Check Python security (when available)
        run: |
          pip install safety
          cd python-backend
          safety check -r requirements.txt || echo "Safety check completed"

  # Performance Benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd python-backend
          pip install -r requirements.txt
          
      - name: Run benchmark tests
        run: |
          cd python-backend
          python -c "
          import time
          import numpy as np
          print('Basic NumPy performance test...')
          start = time.time()
          arr = np.random.rand(1000, 1000)
          result = np.dot(arr, arr.T)
          end = time.time()
          print(f'NumPy matrix multiplication (1000x1000): {end-start:.3f}s')
          "

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check TypeScript formatting
        run: npx prettier --check "src/**/*.{ts,tsx}"
        
      - name: Check Rust formatting
        run: |
          cd src-tauri
          cargo fmt --all -- --check
          
      - name: Run Clippy
        run: |
          cd src-tauri
          cargo clippy --all-targets --all-features -- -D warnings 